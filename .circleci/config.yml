version: 2.1

orbs:
  aws-cli: circleci/aws-cli@1.3.0

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:  
      when:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Delete files from bucket
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}/ --recursive
            # Delete front end stack
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
            # Delete back end stack
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      when:
        type: string  
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          when: on_fail
          command: |
            MIGRATION_RESULT=$(curl -H "token: ${CIRCLE_WORKFLOW_ID:0:7}" --request GET https://api.memstash.io/values/migration_result)
            if(( ${MIGRATION_RESULT}==1 )); 
            then
              cd ~/project/backend
              npm install
              Add revert code here. You can find this in the Getting Started section.
              npm run migrations:revert
              exit 1
            fi
          
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd frontend
            npm install
            npm run build
            npm audit fix --audit-level=critical --force
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
           # Your code here
            cd backend
            npm install
            npm run build
            npm audit fix --audit-level=critical --force
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
       - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: ["frontend-build"]
      - run:
          name: Font-end test
          command: |
            cd frontend
            npm install oauth-sign
            npm run test
                
  test-backend:
    docker:
       - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: ["backend-build"]
      - run:
          name: Back-end test
          command: |
            cd backend
            npm run test
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: ["frontend-build"]
      - run:
          name: Font-end security scan
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: ["backend-build"]
      - run:
          name: Back-end security scan
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout 
      - run: yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file ./.circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" 
            URLS=$(aws ec2 describe-instances --region us-west-2 --query "Reservations[*].Instances[*].PublicIpAddress" \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text)
            echo "URLS=$URLS"
            echo "${CIRCLE_WORKFLOW_ID:0:7}"
            curl -H "Content-Type: text/plain" -H "token: 4e47457d-c271-4422-960f-ff526f1f1ab8" --request PUT \
              --data "$URLS" https://api.memstash.io/values/url_${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file ./.circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "frontend-${CIRCLE_WORKFLOW_ID:0:7}"  \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
            ARN=$(aws s3 ls | grep udapeople)
            echo "ARN=$ARN"
            curl -H "Content-Type: text/plain" -H "token: 4e47457d-c271-4422-960f-ff526f1f1ab8" --request PUT \
              --data "$ARN" https://api.memstash.io/values/arn_${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo "[web]" >> ./.circleci/ansible/inventory.txt
            backend_ip=$(curl -H  "token: 4e47457d-c271-4422-960f-ff526f1f1ab8" --request GET \
            https://api.memstash.io/values/url_${CIRCLE_WORKFLOW_ID:0:7})
            echo "$backend_ip" >> ./.circleci/ansible/inventory.txt
            cat ./.circleci/ansible/inventory.txt
      - run:
          name: Resolve dependencies
          command: |
            yum -y install tar gzip jq npm 
      - persist_to_workspace:
          root: /root
          paths:
            - project
      - destroy-environment:
          when: on_fail
      #- destroy-environment
      # Here's where you will add some code to rollback on failure    
    
  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      - add_ssh_keys:
          fingerprints: ["10:bf:fc:de:65:77:9c:2e:cb:12:36:db:4e:6f:8c:da"]
      # Add ssh keys with fingerprint
      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            apk add --no-cache curl
            apk add tar
            apk add gzip
            pip install awscli
            ansible --version
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            cat ./inventory.txt
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook -i ./inventory.txt configure-server.yml
      # Here's where you will add some code to rollback on failure

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            cd backend
            pwd
            echo -e "TYPEORM_HOST=$TYPEORM_HOST \n
            TYPEORM_CONNECTION=$TYPEORM_CONNECTION \n
            TYPEORM_PORT=$TYPEORM_PORT \n
            TYPEORM_USERNAME=$TYPEORM_USERNAME \n
            TYPEORM_PASSWORD=$TYPEORM_PASSWORD \n
            TYPEORM_DATABASE=$TYPEORM_DATABASE \n
            TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS \n
            TYPEORM_ENTITIES=$TYPEORM_ENTITIES \n
            NODE_ENV=production \n
            ENVIRONMENT=$ENVIRONMENT" > ./backend/.env
            cat ./backend/.env
            npm install
            npm run migrations > migration_result.txt
            cat migration_result.txt
      - run:
          name: Send migration results to memstash
          command: |
            cd backend
            if grep -q "has been executed successfully"  migration_result.txt
            then
              echo "Migration success"
              curl -H "Content-Type: text/plain" -H "token: 4e47457d-c271-4422-960f-ff526f1f1ab8" --request PUT \
              --data "0" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7} 
            else
              echo "Migration failure"
              curl -H "Content-Type: text/plain" -H "token: 4e47457d-c271-4422-960f-ff526f1f1ab8" --request PUT \
              --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7} 
            fi
            echo "${CIRCLE_WORKFLOW_ID:0:7}"
  
  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            curl -sL https://rpm.nodesource.com/setup_lts.x | bash -
            yum -y install nodejs
            yum -y install tar gzip
      - run:
          name: Get backend url and deploy frontend objects
          command: |
            export BACKEND_IP=$(curl -H  "token: 4e47457d-c271-4422-960f-ff526f1f1ab8" --request GET \
            https://api.memstash.io/values/url_${CIRCLE_WORKFLOW_ID:0:7})
            export API_URL="http://${BACKEND_IP}:3030" >> "frontend/.env"
            echo "${API_URL}"
            cat frontend/.env
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 sync dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}
      - destroy-environment:
          when: on_fail
      - revert-migrations:
          when: on_fail      
      # Here's where you will add some code to rollback on failure     
     # Here's where you will add some code to rollback on failure  
   

  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["10:bf:fc:de:65:77:9c:2e:cb:12:36:db:4e:6f:8c:da"]
      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible nodejs npm
            pip install awscli
            aws --version
            ansible --version
      - run:
          name: Install Open SSH
          command: apk add openssh-client
      - run:
          name: create .env files
          command: |
            echo ENVIROMENT=production > "backend/.env"
            echo NODE_ENV=production > "backend/.env"
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
      - run:
          name: Deploy backend
          command: |
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment:
          when: on_fail 
      - revert-migrations:
          when: on_fail    
      # Here's where you will add some code to rollback on failure  


  smoke-test:
    docker:
      - image: python:3.7-alpine3.11 
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update curl nodejs npm
            pip install awscli
      - run:
          name: Get backend url
          command: |
           IP=$(curl -H "token: ${CIRCLE_WORKFLOW_ID:0:7}" --request GET https://api.memstash.io/values/instance_ip)
      - run:
          name: Backend smoke test.
          command: |
            if curl -s https://${IP}:3030/api/status | grep "ok"
            then
              return 1
            else
              return 0
            fi
      - run:
          name: Frontend smoke test.
          command: |
            #URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website.us-west-2.amazonaws.com"
            if curl -s "http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website.us-west-2.amazonaws.com/#/index.html" | grep -o "Welcome"
            then
              echo ${URL}
            else
              echo ${URL}
            fi
      - destroy-environment:
          when: on_fail
      - revert-migrations:
          when: on_fail 
       

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum -y install tar gzip
      - run:
          name: Update cloudfront distribution
          command: |
            export OldWorkflowID=$(aws cloudformation list-exports --query "Exports[?Name==\`WorkflowID\`].Value" --no-paginate --output text)
            echo OldWorkflowID: "$OldWorkflowID"
            
            curl -H "Content-Type: text/plain" -H "token: 4e47457d-c271-4422-960f-ff526f1f1ab8" --request PUT \
              --data "$OldWorkflowID" https://api.memstash.io/values/id_${CIRCLE_WORKFLOW_ID:0:7}
            export STACKS=$(aws cloudformation list-stacks \
            --query "StackSummaries[*].StackName" \
            --stack-status-filter CREATE_COMPLETE \
            --no-paginate --output text)
            echo STACKS: "$STACKS"
            echo "Update cloudfront stack"
            aws cloudformation deploy \
              --stack-name udapeople \
              --template-file .circleci/files/cloudfront.yml \
              --region ${AWS_DEFAULT_REGION} \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople-cloudfront
      # Here's where you will add some code to rollback on failure  
      - revert-migrations:
          when: on_fail  

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-backend]
          #requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      

